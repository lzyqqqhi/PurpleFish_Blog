(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{363:function(t,a,s){"use strict";s.r(a);var v=s(27),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"css渲染原理以及gpu-加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css渲染原理以及gpu-加速"}},[t._v("#")]),t._v(" CSS渲染原理以及GPU 加速")]),t._v(" "),a("h3",{attrs:{id:"渲染原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染原理"}},[t._v("#")]),t._v(" 渲染原理")]),t._v(" "),a("h3",{attrs:{id:"一、渲染流程总览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、渲染流程总览"}},[t._v("#")]),t._v(" 一、渲染流程总览")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("解析 HTML，生成 DOM 树")]),t._v(" "),a("ul",[a("li",[t._v("浏览器的 HTML 解析器会将 HTML 代码逐字符扫描，识别标签、属性、文本等元素，然后将这些元素按照文档的层次结构转换成 DOM（Document Object Model）节点树。例如，对于简单的 HTML 代码：\n"),a("ul",[a("li",[a("code",[t._v("<html><head><title>页面标题</title></head><body><div>内容</div></body></html>")])]),t._v(" "),a("li",[t._v("解析后生成的 DOM 树的根节点是 "),a("code",[t._v("<html>")]),t._v("，它的子节点包括 "),a("code",[t._v("<head>")]),t._v(" 和 "),a("code",[t._v("<body>")]),t._v("。"),a("code",[t._v("<head>")]),t._v(" 节点下又有 "),a("code",[t._v("<title>")]),t._v(" 子节点，"),a("code",[t._v("<body>")]),t._v(" 节点下有 "),a("code",[t._v("<div>")]),t._v(" 子节点，而 "),a("code",[t._v("<div>")]),t._v(" 节点下有文本节点 “内容”。这个 DOM 树就像一个文档的家谱图，表示了页面的结构。")])])])])]),t._v(" "),a("li",[a("strong",[t._v("解析 CSS，计算样式")]),t._v(" "),a("ul",[a("li",[t._v("渲染引擎（如 Blink、Gecko 等）会解析外部 CSS 文件或者 "),a("code",[t._v("<style>")]),t._v(" 标签中的 CSS 样式。它会根据选择器匹配规则，找出每个 DOM 节点对应的 CSS 样式规则。例如，对于 HTML 和 CSS 代码：\n"),a("ul",[a("li",[t._v("HTML："),a("code",[t._v('<div class="box">盒子</div>')])]),t._v(" "),a("li",[t._v("CSS："),a("code",[t._v(".box { color: red; font - size: 16px; }")])]),t._v(" "),a("li",[t._v("渲染引擎解析 CSS 后，会计算出 "),a("code",[t._v('<div class="box">')]),t._v(" 元素的字体颜色为红色，字体大小为 16 像素，并将这些样式信息与该 DOM 节点关联起来。")])])])])]),t._v(" "),a("li",[a("strong",[t._v("构建布局树（Render Tree）并计算布局")]),t._v(" "),a("ul",[a("li",[t._v("布局树是 DOM 树的一个子集，它只包含对页面布局和可视化有影响的节点。浏览器会遍历 DOM 树，同时参考样式信息来构建布局树。例如，在 HTML 中有一个 "),a("code",[t._v("<script>")]),t._v(" 标签，它不会对页面的布局产生影响，所以不会被包含在布局树中。")]),t._v(" "),a("li",[t._v("计算布局这个过程也称为回流（reflow）。浏览器会根据 CSS 盒模型，计算每个布局树节点在页面中的位置（如 left、right、top、bottom 等）和大小（如 width、height 等）。例如，一个 "),a("code",[t._v("<div>")]),t._v(" 元素设置了宽度为 200 像素，内边距为 10 像素，边框为 5 像素，那么它的总宽度会根据盒模型计算为 200 + 10\n"),a("ul",[a("li",[t._v("2 + 5")]),t._v(" "),a("li",[t._v("2 = 230 像素。")])])])])]),t._v(" "),a("li",[a("strong",[t._v("布局树分层，生成分层树")]),t._v(" "),a("ul",[a("li",[t._v("有些元素（如透明元素、使用了 z - index 属性定位的元素等）会产生自己的图层，这样可以提高页面的渲染性能。浏览器会将布局树中的元素按照这些规则进行分层，形成分层树。例如，一个视频元素和一个位于其上的半透明遮罩层，它们可能会被分配到不同的图层，这样在进行动画效果或者滚动操作时，可以只对特定的图层进行更新和合成，而不需要重新绘制整个页面。")])])]),t._v(" "),a("li",[a("strong",[t._v("生成绘制列表（Display List）并提交给合成线程")]),t._v(" "),a("ul",[a("li",[t._v("每个图层会生成一个绘制列表，这个列表包含了一系列的绘制命令，如绘制文字、绘制图形、填充颜色等。例如，对于一个带有边框的矩形元素，绘制列表可能会包含 “绘制一个矩形边框”“在矩形内部填充指定颜色” 等命令。然后，这些绘制列表会被提交给合成线程。")])])]),t._v(" "),a("li",[a("strong",[t._v("图层分块并栅格化化位图")]),t._v(" "),a("ul",[a("li",[t._v("合成线程会将图层分成小的图块（通常是尺寸相同的矩形区域），这样做的目的是为了方便后续的并行处理和更精细的渲染控制。然后，在光栅化线程池中，每个图块会被转换为位图图片数据。例如，一个图层被分成 4 个图块，每个图块都会根据该图层的绘制列表中的命令（如绘制文字、图形等）在相应的区域内生成位图像素数据。")])])]),t._v(" "),a("li",[a("strong",[t._v("发送显示指令（DrawQuad）给浏览器进程")]),t._v(" "),a("ul",[a("li",[t._v("合成线程会将这些图块的绘制指令（DrawQuad）发送给浏览器进程。DrawQuad 是一种数据结构，它包含了图块在页面中的位置、尺寸以及对应的位图数据引用等信息。浏览器进程根据这些指令来决定如何在屏幕上显示这些图块。")])])]),t._v(" "),a("li",[a("strong",[t._v("显示页面到屏幕")]),t._v(" "),a("ul",[a("li",[t._v("浏览器进程（如 Chrome 的浏览器主进程）会协调操作系统和显卡，将这些图块按照 DrawQuad 指令中的位置和顺序组合起来，最终生成用户可以看到的页面图像，并将其绘制到显示器上。这个过程涉及到显卡的加速渲染，使得页面能够以流畅的方式呈现给用户。")])])])]),t._v(" "),a("h3",{attrs:{id:"二、流程图-思维导图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、流程图-思维导图"}},[t._v("#")]),t._v(" 二、流程图（思维导图）")]),t._v(" "),a("div",{staticClass:"language-Plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[t._v("HTML ➡ 解析成 DOM 树\n     ⬇\nCSS ➡ 解析成样式规则，计算样式\n     ⬇\n构建布局树 ➡ 布局 ➡ 分层 ➡ 生成绘制列表 ➡ 图层分块与栅格化 ➡ DrawQuad 指令 ➡ 显示到屏幕\n")])])]),a("h3",{attrs:{id:"三、口诀记忆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、口诀记忆"}},[t._v("#")]),t._v(" 三、口诀记忆")]),t._v(" "),a("blockquote",[a("p",[t._v("DOM 树、样式算，布局分层绘命令，分块转图成位图，DrawQuad 展示见屏幕！")])]),t._v(" "),a("h3",{attrs:{id:"四、总结金句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、总结金句"}},[t._v("#")]),t._v(" 四、总结金句")]),t._v(" "),a("blockquote",[a("p",[t._v("浏览器完整渲染流程包括 HTML 解析、CSS 计算、布局树建立与分层、位图生成和页面显示，环环相扣、高效呈现网页内容。")])]),t._v(" "),a("p",[a("strong",[t._v("GPU（图形处理器）加速")]),t._v("，指浏览器渲染时将部分计算任务（如动画、变换、绘制等）从 CPU 转移到 GPU 上执行，以提升页面的渲染性能与动画流畅度。")]),t._v(" "),a("h3",{attrs:{id:"二、gpu-加速的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、gpu-加速的原理"}},[t._v("#")]),t._v(" 二、GPU 加速的原理")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("CPU VS GPU")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("CPU")]),t._v("：通用计算，擅长逻辑和顺序操作，处理能力有限。")]),t._v(" "),a("li",[a("strong",[t._v("GPU")]),t._v("：专门为并行图形渲染设计，适合大规模、重复的像素计算。")])])]),t._v(" "),a("li",[a("strong",[t._v("页面渲染流程")]),t._v(" "),a("ul",[a("li",[t._v("默认情况下，大多数 CSS 样式变动（如位置、大小、颜色变化）都在 CPU 参与下进行布局和重绘。")]),t._v(" "),a("li",[t._v("通过某些 CSS 属性或技巧，将部分渲染任务（如变换、透明度动画等）“升格”为 GPU 图层（compositing layer），由 GPU 负责类似于“视频合成”那样的高效运算，减轻 CPU 压力，实现动画更流畅、卡顿更少。")])])])]),t._v(" "),a("h3",{attrs:{id:"gpu-能加速哪些操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpu-能加速哪些操作"}},[t._v("#")]),t._v(" GPU 能加速哪些操作？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("变换")]),t._v("："),a("code",[t._v("transform")]),t._v("（如 "),a("code",[t._v("translate3d")]),t._v("、"),a("code",[t._v("scale")]),t._v("、"),a("code",[t._v("rotate")]),t._v(" 等）")]),t._v(" "),a("li",[a("strong",[t._v("透明度")]),t._v("："),a("code",[t._v("opacity")]),t._v(" 动画变化")]),t._v(" "),a("li",[a("strong",[t._v("滤镜")]),t._v("："),a("code",[t._v("filter")])]),t._v(" "),a("li",[t._v("主要作用于“复合（compositing）”阶段，避免频繁的回流重绘")])]),t._v(" "),a("h3",{attrs:{id:"三、如何触发和使用-gpu-加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、如何触发和使用-gpu-加速"}},[t._v("#")]),t._v(" 三、如何触发和使用 GPU 加速？")]),t._v(" "),a("h4",{attrs:{id:"_1-使用-3d-变换属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用-3d-变换属性"}},[t._v("#")]),t._v(" 1. 使用 3D 变换属性")]),t._v(" "),a("div",{staticClass:"language-CSS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 利用 translate3d 或 translateZ 创建硬件加速层 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("transform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("translate3d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 或 */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("will-change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" transform"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-使用-will-change-提示浏览器优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-will-change-提示浏览器优化"}},[t._v("#")]),t._v(" 2. 使用 "),a("code",[t._v("will-change")]),t._v(" 提示浏览器优化")]),t._v(" "),a("div",{staticClass:"language-CSS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 提前告诉浏览器该元素即将变化，促使浏览器分配独立合成层，提高性能 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".animated")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("will-change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" transform"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-设置-transform-translatez-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置-transform-translatez-0"}},[t._v("#")]),t._v(" 3. 设置 "),a("code",[t._v("transform: translateZ(0)")])]),t._v(" "),a("div",{staticClass:"language-CSS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".gpu")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("transform")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("translateZ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("em",[t._v("这种写法不会改变元素外观，但会强制其创建独立的 GPU 合成层。")])]),t._v(" "),a("h4",{attrs:{id:"_4-配合-css-动画属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-配合-css-动画属性"}},[t._v("#")]),t._v(" 4. 配合 CSS 动画属性")]),t._v(" "),a("p",[t._v("对 "),a("code",[t._v("transform")]),t._v(" 或 "),a("code",[t._v("opacity")]),t._v(" 做动画，比直接动画 left/top/width/height 更容易触发 GPU 加速且更高效。")]),t._v(" "),a("h3",{attrs:{id:"四、注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、注意事项"}},[t._v("#")]),t._v(" 四、注意事项")]),t._v(" "),a("ul",[a("li",[t._v("滥用会造成"),a("strong",[t._v("内存压力")]),t._v("，不要给大量元素都加上硬件加速样式，否则会反而降低性能。")]),t._v(" "),a("li",[t._v("适用于需要流畅过渡/动画的关键元素，不要无脑全加。")]),t._v(" "),a("li",[t._v("检查效果可用浏览器开发者工具查看“图层”或“复合（compositing）”信息。")])]),t._v(" "),a("h3",{attrs:{id:"一句话总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一句话总结"}},[t._v("#")]),t._v(" 一句话总结")]),t._v(" "),a("blockquote",[a("p",[t._v("GPU 加速是现代前端优化动画性能的重要手段，合理利用 transform、opacity 及 will-change 能让页面动画更丝滑流畅。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);