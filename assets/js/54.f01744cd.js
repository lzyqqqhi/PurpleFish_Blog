(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{371:function(e,o,t){"use strict";t.r(o);var v=t(27),_=Object(v.a)({},(function(){var e=this,o=e._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"object方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#object方法"}},[e._v("#")]),e._v(" Object方法")]),e._v(" "),o("h3",{attrs:{id:"静态方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),o("ol",[o("li",[o("strong",[o("code",[e._v("Object.assign(target, ...sources)")])]),e._v(" "),o("ul",[o("li",[e._v("用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const obj = Object.assign({}, { a: 1 }, { b: 2 });")])])])])]),e._v(" "),o("ul",[o("li",[e._v("快捷写法：使用展开运算符 ... 进行对象浅拷贝。\n"),o("ul",[o("li",[e._v("示例：const obj = { ...{ a: 1 }, ...{ b: 2 } };")])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[o("code",[e._v("Object.create(proto, [propertiesObject])")])])]),e._v(" "),o("ul",[o("li",[e._v("创建一个新对象，使用现有的对象来提供新创建的对象的 "),o("code",[e._v("__proto__")]),e._v("。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const newObj = Object.create(oldObj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.defineProperty(obj, prop, descriptor)")])])]),e._v(" "),o("ul",[o("li",[e._v("直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.defineProperty(obj, 'prop', { value: 42, writable: false });")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.defineProperties(obj, props)")])])]),e._v(" "),o("ul",[o("li",[e._v("直接在一个对象上定义一个或多个新的属性，或者修改一个对象的现有属性，并返回此对象。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.defineProperties(obj, { prop1: { value: 1 }, prop2: { value: 2 } });")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.entries(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回一个给定对象自身可枚举属性的键值对数组。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const entries = Object.entries({ a: 1, b: 2 }); // [['a', 1], ['b', 2]]")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.freeze(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("冻结一个对象，使其属性不可修改。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.freeze(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.fromEntries(iterable)")])])]),e._v(" "),o("ul",[o("li",[e._v("把键值对列表转换为一个对象。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const obj = Object.fromEntries([['a', 1], ['b', 2]]); // { a: 1, b: 2 }")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.getOwnPropertyDescriptor(obj, prop)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回指定对象上一个自有属性对应的属性描述符。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const descriptor = Object.getOwnPropertyDescriptor(obj, 'prop');")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.getOwnPropertyDescriptors(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("获取一个对象的所有自身属性的描述符。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const descriptors = Object.getOwnPropertyDescriptors(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.getOwnPropertyNames(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回一个数组，包含对象自身的所有可枚举和不可枚举属性的名称。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const names = Object.getOwnPropertyNames(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.getOwnPropertySymbols(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回一个数组，包含对象自身的所有 Symbol 属性的名称。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const symbols = Object.getOwnPropertySymbols(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.getPrototypeOf(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回指定对象的原型（即 "),o("code",[e._v("__proto__")]),e._v(" 指向的对象）。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const proto = Object.getPrototypeOf(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.is(value1, value2)")])])]),e._v(" "),o("ul",[o("li",[e._v("比较两个值是否相同。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.is(25, 25); // true")])])])])]),e._v(" "),o("ul",[o("li",[e._v("对于严格相等比较，可以使用 "),o("code",[e._v("===")]),e._v(" 运算符。\n"),o("ul",[o("li",[o("strong",[e._v("示例")]),e._v("："),o("code",[e._v("25 === 25; // true")])])])])]),e._v(" "),o("ol",{attrs:{start:"14"}},[o("li",[o("p",[o("strong",[o("code",[e._v("Object.isExtensible(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("判断一个对象是否可扩展（即是否可以添加新的属性）。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.isExtensible(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.isFrozen(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("判断一个对象是否被冻结。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.isFrozen(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.isSealed(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("判断一个对象是否被密封。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.isSealed(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.keys(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回一个包含对象自身所有可枚举属性的名称的数组。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const keys = Object.keys(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.preventExtensions(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("防止一个对象被扩展，即不能再添加新的属性。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.preventExtensions(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.seal(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("密封一个对象，使其属性不可添加和删除。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.seal(obj);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.setPrototypeOf(obj, prototype)")])])]),e._v(" "),o("ul",[o("li",[e._v("设置一个对象的原型。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("Object.setPrototypeOf(obj, newProto);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("Object.values(obj)")])])]),e._v(" "),o("ul",[o("li",[e._v("返回一个包含对象自身所有可枚举属性值的数组。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("const values = Object.values(obj);")])])])])]),e._v(" "),o("h3",{attrs:{id:"实例方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),o("ol",[o("li",[o("strong",[o("code",[e._v("obj.hasOwnProperty(prop)")])]),e._v(" "),o("ul",[o("li",[e._v("判断一个对象是否包含特定的自身（非继承）属性。")])])])]),e._v(" "),o("ul",[o("li",[o("p",[e._v("示例："),o("code",[e._v("obj.hasOwnProperty('prop');")])]),e._v(" "),o("ul",[o("li",[o("p",[e._v("可以使用")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" Object.prototype.hasOwnProperty.call(obj, prop) \n")])])]),o("p",[e._v("作为替代。")])]),e._v(" "),o("li",[o("p",[e._v("示例：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("Object.prototype.hasOwnProperty.call(obj, 'prop');\n")])])])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[o("code",[e._v("obj.isPrototypeOf(obj2)")])])]),e._v(" "),o("ul",[o("li",[e._v("判断一个对象是否是另一个对象的原型。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("obj.isPrototypeOf(obj2);")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("obj.propertyIsEnumerable(prop)")])])]),e._v(" "),o("ul",[o("li",[e._v("判断一个对象上的属性是否可枚举。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("obj.propertyIsEnumerable('prop');")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("obj.toString()")])])]),e._v(" "),o("ul",[o("li",[e._v("返回对象的字符串表示。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("obj.toString();")])])])]),e._v(" "),o("li",[o("p",[o("strong",[o("code",[e._v("obj.valueOf()")])])]),e._v(" "),o("ul",[o("li",[e._v("返回对象的原始值。")]),e._v(" "),o("li",[e._v("示例："),o("code",[e._v("obj.valueOf();")])])])])])])}),[],!1,null,null,null);o.default=_.exports}}]);